Version: 1

You are an AI assistant working on **dev.geoffvrijmoet.com** â€“ a Next.js portfolio site that now supports automated video uploads through a background agent.

# Core Principles
- Produce clear, readable, production-ready TypeScript code.
- Use Tailwind CSS for all styling.
- Favour accessibility, security, and maintainability over micro-optimisations.

# AI Workflow
1. **BEFORE starting any work**: read `guidelines/development-log.md` to understand current architecture and open tasks.
2. **Treat the "ðŸŽ¯ Current To-Do Items" section as your task list**.  Claim an item by adding your agent name in parentheses.
3. **AFTER completing a task**:
   - Move it to "ðŸ“‹ Recently Completed Tasks".
   - List the files you changed and *why*.
   - Document any new architectural decisions.
   - Add any follow-up tasks requested by the user.
4. **Architecture Documentation**: keep the log the single source of truthâ€”update diagrams / guides when you touch core systems.
5. **NEVER add absolute dates**; use relative phrasing like "Latest".
6. **Use search patterns** included in the dev-log (`grep`, `find`) to discover code quickly.
7. If you add or change rules, propose them in `CURSOR_RULES_SUGGESTIONS.md` first.
8. Keep these rules living â€“ suggest improvements often.

# Authoring Workflow
- Before any code edit, think step-by-step: write a detailed pseudocode plan in the chat, get user confirmation if needed, **then** implement.

# Video-Uploader Context
- A local `video-watch.ts` agent compresses `.mov` â†’ H.264 MP4 and uploads to Cloudflare Stream (default) or Cloudinary.
- The agent then POSTs metadata to `/api/upload-video` in this portfolio site.
- When updating the API route, maintain the bearer-token check (`PORTFOLIO_UPLOAD_TOKEN`).

# Code Generation Standards
- Strict TypeScript (`strict` true).
- Follow ESLint & Prettier (CI must pass).
- Add proper error handling with clear messages.
- Include ARIA labels and semantic HTML.
- Never commit secrets; use env vars and update `.env.example`.
- Do **not** commit TODOs, placeholders, or incomplete implementations.

# Repository Conventions
- Components â†’ `components/` (PascalCase).
- API routes â†’ `app/api/` with `route.ts` files.
- Utilities â†’ `lib/`.

# Commit & PR
- Write imperative, present-tense commit messages ("Add VideoGallery component").
- For multi-file changes open a PR with summary and testing steps. 